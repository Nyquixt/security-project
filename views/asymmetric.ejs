<!doctype html>

<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1">
    <title>Asymmetric</title>
    <meta name="description" content="Network Security Labs">
    <meta name="author" content="Kenzie Clarke">
    <link rel="icon" href="/images/Network2.png">

    <link rel="stylesheet" href="/css/parallax.css">
    <link rel="stylesheet" href="/css/dashedshadow.css">
    <link rel="stylesheet" href="/css/navbar.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.3.1.min.js">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous">
    </script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous">
    </script>
    <script src="/js/asymmetric.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Cookie' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Abel' rel='stylesheet'>

    <style>
        .text-collapse {
            text-overflow: ellipsis;
            width: 80%;
            white-space: nowrap;
            overflow: hidden;
            display: block;
        }

        /* #example {
            text-align: center;
        }

        #example div {
            display: inline-block;
            text-align: left;
            margin-left: 10%;
            margin-right: 10%;
        } */
    </style>
</head>

<body>
    <div id="frame">
        <article>
            <div class="title">
                <img src="/images/Network2.png" width="50%">
                <span data-text="Network Security Labs" class="dashed-shadow hello">Network Security Labs</span>
            </div>
            <div class="navbar">
                <div class="navbar-centered">
                    <a href="/">Home </a>
                    <a href="/keyexchange"> Key Exchange</a>
                    <a href="/symmetric">Symmetric </a>
                    <a class="active" style="background-color: white" href="#">Asymmetric </a>
                </div>
            </div>
            <div class="parallax">
                <div class="bg_break" style="background-color: white;"> <br> </div>
                <div class="bg__regular" style="background-image: url(/images/cyber.jpg);">
                </div>
            </div>
            <div class="header">
                <h1>Asymmetric Encryption</h1>
                <p>These algorithms split the secret key into two parts: the public key and the private key. </p>
            </div>
            <div class="iframe-container">
                <iframe src="https://www.youtube.com/embed/GSIDS_lvRv4" allowfullscreen></iframe>
            </div>
            <section>
                <div class="container">
                </div>
            </section>
            <section class="parallax">
                <div class="bg__break" style="height: 30vh; background-image: url(/images/enigma.jpg);">
                </div>
            </section>
            <section>
                <h1> RSA </h1>
                <p2>RSA (Rivest–Shamir–Adleman) is one of the first public-key cryptosystems and is widely used for secure data transmission. In such a cryptosystem, the encryption key is public and it is different from the decryption key which is kept secret (private). In RSA, this asymmetry is based on the practical difficulty of the factorization of the product of two large prime numbers, the "factoring problem".<br><br></p2>

                <h2>Notes about RSA</h2>
                <p2>
                        <ol>
                            <li>based on exponentiation in a finite (Galois) field over integers modulo a prime</li>
                            <li>no substitution or permutation</li>
                            <li>security due to cost of factoring large numbers</li>
                        </ol>
                        RSA is a complement rather than a replacement to symmetric key cryptography.
                    </p2>
                 <img src="/images/keygeneration.png" style="display: block;margin:auto" width="90%">   
                <h2><br>Key Generation </h2>
                <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#setup"
                    style="float: right">...</button>
                <div id="setup" class="collapse">
                    <h3>Step 1</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#step1"
                        style="float: right">...</button>
                    <div id="step1" class="collapse">
                        <p2>
                            Each user generates a public/private key pair by:
                            <ol>
                                <li>selecting two large primes at random: <code>p, q</code></li>
                                <li>computing their system modulus <code>n = p * q</code></li>
                                <li>note <code>ø(n)=(p-1)(q-1)</code></li>
                            </ol>
                        </p2>
                    </div>
                    <h3>Step 2</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#step2"
                        style="float: right">...</button>
                    <div id="step2" class="collapse">
                        <p2>
                            Select at random the encryption key <code>e</code>
                            <ul>
                                <li>where <code>1 &lt; e &lt; ø(n), gcd(e,ø(n))=1</code></li>
                            </ul>
                        </p2>
                    </div>

                    <h3>Step 3</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#step3"
                        style="float: right">...</button>
                    <div id="step3" class="collapse">
                        <p2>
                            Solve following equation to find decryption key <code>d</code>
                            <ul>
                                <li><code>e * d = 1 mod ø(n) and 0 &le; d &le; n</code></li>
                            </ul>
                        </p2>
                    </div>

                    <h3>Step 4</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#step4"
                        style="float: right">...</button>
                    <div id="step4" class="collapse">
                        <p2>
                            <ul>
                                <li>Publish their public encryption key: <code>Pu = {e, n}</code></li>
                                <li>Keep secret private decryption key: <code>Pr = {d, n}</code></li>
                            </ul>
                        </p2>
                    </div>
                </div>

                <h2><br>En/Decryption</h2>
                <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#enc-dec"
                    style="float: right">...</button>
                <div id="enc-dec" class="collapse">
                    <p2> Both Encryption and Decryption are simple tasks once the key has been safely generated. Using mathematical formula's, both the send and reciever can use their appropriate key to lock or unlock the message.<br><br>
                    <p2>Use exponentiation of integers modulo a prime:
                        <ul>
                            <li>Encryption: <code>C = M<sup>e</sup> mod n</code></li>
                            <li>Decryption: <code>M = C<sup>d</sup> mod n = (M<sup>e</sup>)<sup>d</sup> mod n = M</code>
                            </li>
                            <li>Notes:
                                <ul>
                                    <li>Both sender and receiver know values of <code>n</code> and <code>e</code></li>
                                    <li>Only receiver knows the value of <code>d</code></li>
                                </ul>
                            </li>
                            <li>NOTE: If the sender encrypts their message using the public key of the reciever (common practice), then only the reciever's <i>private</i> key <code>Pr</code> will decrypt the message. Similarly, a message encrypted with a private key can only be decrypted by the corresponding <i>public key</i>.</li>
                        </ul>
                    </p2>

                </div>

                <h2><br>Security</h2>
                    <p2> Like the video explained, RSA's security is founded in two matematical problems: the RSA problem and the problem of factoring large numbers. That is why a full decryption of RSA ciphertext is infeasible in a timely fashion. Here are some of the ideas hackers have posed over time to try an attack this encryption alogrithm: <br><br> </p2>
                    <p2>Possible approaches of attacking RSA are:
                        <ul>
                            <li>Brute force key search - infeasible given size of numbers</li>
                            <li>Mathematical attacks - based on difficulty of computing <code>ø(n)</code>, by factoring
                                modulus <code>n</code></li>
                            <li>Timing attacks - on running of decryption</li>
                            <li>Chosen ciphertext attacks - given properties of RSA</li>
                        </ul>
                    </p2>
                <h2><br>Applications</h2>
                    <h3>Digital Envelopes</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#dig-env"
                        style="float: right">...</button>
                    <div id="dig-env" class="collapse">
                        <img src="/images/dig-env.png" alt="Digital Envelopes" class="center"
                            style="width: 70%; display: block;padding: 2em">
                        <p2>
                            Digital Envelopes are used to protect a symmetric key. The process consists of 4 steps:
                            <ul>
                                <li>Prepare a message</li>
                                <li>Encrypt that message using conventional encryption with a one-time conventional
                                    session key</li>
                                <li>Encrypt the session key using public-key encryption with Receiver's public key</li>
                                <li>Attach the encrypted session key to the message and send it to the Receiver</li>
                            </ul>
                        </p2>
                    </div>

                    <h3>Certificates</h3>
                    <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#certs"
                        style="float: right">...</button>
                    <div id="certs" class="collapse">
                        <img src="/images/certs.png" alt="Certificates" class="center"
                            style="width: 70%; display: block;padding: 2em">
                        <p2>
                            Certificates, or signed public key(s), are used to gain trust of a public key.
                        </p2>
                    </div>
                    <h2><br>RSA Tools</h2>
                    <div id="alice" style="display: inline-block; margin-inline-end: 10%">
                        <h3>Alice (Sender)</h3><br>
                        <button class="btn btn-dark" id="alice-genkey">Generate A Key Pair</button>

                        <button class="btn btn-dark" id="toggle-public">Show Public Key</button>
                        <button class="btn btn-dark" id="toggle-private">Show Private Key</button>
                        <div id="pub"><span style="text-align:left" id="alice-public"></span></div>
                        <div id="pri"><span style="text-align:left" id="alice-private"></span></div>

                        <p><label for="message"><br> Plaintext Message:</label></p>
                        <input class="form-control" id="message" placeholder="input text here" type="text"><br><br>
                        <button class="btn btn-dark" id="alice-sign">Encrypt with Alice's Private Key</button><br>
                        <p><label for="enc1">Encrypted Message:</label></p>
                        <div><span class="text-collapse" id="enc1" style="word-wrap:break-word;white-space: normal;width:60vw"></span>
                        </div>
                        <br>
                    </div>

                    <div id="bob" style="display:inline-block; margin-top: 0%">
                        <div style="display: block">
                        <h3>Bob (Receiver)</h3><br>
                        <button class="btn btn-dark" id="dec-og">Decrypt with Alice's Public Key</button><br>
                        <p><label for="original-msg">Original Message:</label></p>
                        <div><span class="text-collapse" id="original-msg"></span></div><br>
                    </div>
                </div>
            </section>
            <!--ECC SECTION-->
            <section>
                <h1>ECC </h1>
                <img src="/images/curves.png" alt="ECC Curves" class="center"
                        style="width: 50%; display: block;padding: 2em">
                <p2> Elliptical curve cryptography (ECC) is a public key encryption technique based on elliptic curve theory that can be used to create faster, smaller, and more efficient cryptographic keys. ECC generates keys through the properties of the elliptic curve equation instead of the traditional method of generation as the product of very large prime numbers.<sup>2</sup><br><br> This can be used to encrypt messages, similar to RSA. However, the matematics behind ECC is also being used in a different way - as an alternative to the traditional Diffie-Hellman Key Exchange.</p2>
                

                <h2><br>ECC Diffie-Hellman Key Exchange</h2>
                <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#ecc-diff"
                    style="float: right">...</button>
                <div id="ecc-diff" class="collapse">
                    <p2> Instead of using large prime numbers, Alice and Bob would select parameters on an elliptic curve. This video details how eliptic curves are used to find the variables need for Diffie-Hellman private generation.
                    <div class="iframe-container">
                        <iframe src="https://www.youtube.com/embed/NF1pwjL9-DE" allowfullscreen></iframe>
                     </div>
                     <h3> <br>The Process Diagram</h3>
                     <p2> Now that we can put eliptic curves in context, here is a diagram detailing the Diffie-Hellman process, where the public elements have been altered to show us deriving them from an eliptic curve.
                    <img src="/images/ecc-diff.png" alt="ECC Diffie-Hellman" class="center"
                        style="width: 70%; display: block;padding: 2em;margin:auto">

                </div>
            </section>
            <!--ELGAMAL SECTION-->
            <section>
                <h1>ElGamal</h1>
                <p2>The ElGamal cryptosystem was invented in 1985, by Taher Elgamal. Contemporary elliptic curve cryptography (ECC) is an analogue of ElGamal that uses the group of points on an elliptic curve in place of the integers. Like RSA,ElGamal uses mathematics to generate a public and private key. The public key is published, while the private key is kept secret. In ElGamal, however, the underlying matematical relationship between the encryption and decryption relies upon the <i>discrete log problem</i>.<sup>3</sup></p2> 
                <h3><br>The Process Diagram</h3>
                <button type="button" class="btn btn-secondary" data-toggle="collapse" data-target="#elgamal"
                    style="float: right">...</button>
                <div id="elgamal" class="collapse">
                    <img src="/images/elgamal.png" alt="ElGamal" class="center"
                        style="width: 70%; display: block;padding: 2em;margin:auto">
                </div>

                <h2><br><br></h2>
                <p2> Well done! You've successfully navigated the confusing realm of modern cryptography! Feel free to revisit any of the pages via the navagation bar at the top of the website. <br><br></p2>
                <!-- Insert Next Section Button-->
                <a href="/"> <button type="button" class="btn btn-dark btn-block" id="next" style="font-size: 2vw"> Home
                    </button> </a>
            </section>
        </article>
    </div>
</body>

</html>